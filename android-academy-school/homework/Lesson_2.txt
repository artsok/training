Урок 2:

Чтобы вы могли размещать на экране различные компоненты (кнопки, поля ввода, чекбоксы и т.п.), необходимо использовать специальный контейнер. Именно в него вы будете помещать компоненты. В Android компоненты называются View, а контейнер - ViewGroup.

Существуют несколько типов ViewGroup: LinearLayout, RelativeLayout, FrameLayout, TableLayout, ConstraintLayout и т.д.

Они различаются тем, как они будут упорядочивать компоненты внутри себя. LinearLayout, например, выстроит их по горизонтальной или вертикальной линии. А TableLayout - в виде таблицы. Более подробно об этом вы можете прочитать в Уроке 6.

#1
setContentView(R.layout.activity_main); -  откуда активи брать ваш главный мэйн

класс R - содержит активи всех ресурсов. Генерируется на лету. Иногда студия не видет некоторые ид из данного класса. Иногда требуется собрать проект, нажать синк и тд

Вся работа с UI выполняется в одном thread.

При изминение различных конфигураций, активити теряется и все заново поднимается.

Поддержка различных орентаций.

Два файла активити для горизонтальной и вертикальной ореентации. Дублирование можно избежать.

dp = аналог sp. Служит для размера не тектовых размеров

Андроид при повороте уничтожает ту часть которая отвечает за UI.

Intent - некое описание, что хотим открыть. Создание открытие новых активити


Not a silver bullet

#2
Картинка отображается очень маленькой на разных телефонах, если мы используем pixel, когда задаем размеры изображения. Потому что на одном телефоне один размер экрана, на другом телефоне другой размер.

Screen density = Screen resolution/Screen size

Есть формула, по которой можно перевести пиксели (Finding dp value on pixels)
DP = (pixels * 160) /DPI

Все DPI (Плотность экрана)   разбиты на бакиты:
ldpi (low) = 120dpi
mdpi (medium) = 160dpi - base line (px = dp)
hdpi (hight) = 240dpi
xhdpi (extra-hight) = 320dpi
xxhdpi (extra-extra-high) = 480dpi
xxxdpi (extra-extra-extra-high) = 640 dpi

Мы хотели, чтобы интерфейс был одинаково не зависимо от плотности.

Как мы можем отлечить, что у нас все хорошо нарисовано. В Android Studio воспользоваться выбором различных экранов с разными расширениями. Открываем activity_main.xml и вкладку Design.

Не пренегрибайте пикселями DP.

Тема: Multiple layout
- На разных экранах Nexus 4 и Pixel XL могут не отображаться все компоненты, потому-что например кнопка не влезла на Nexus 4. Не хватка нужного количества DP.
- А еще есть клавиатура и она тоже приносит много сюрпризов.

Вы можете сами раделить на баките, как вы этого хотите.
- res/layout/my_layout.xml
- res/layout-sw600dp/my_layout.xml
- res/layout-land-h700dp/my_layout.xml
В репльной жизни, мы просто откидываем маленькие телефоны, когда не хотим с ним заморачиваться. Либо делаем на маленькие телефоны loyout.

Картинки можем расместить по папкам. Рекомендуют загружать drawable сразу всех размеров.
Есть loyout, которые хорошо тянуться - Constrain, но не всегда это выход.
По картинкам можно тоже расделить и пользователь будет не все их загружать.
Использовать веса - такой подход не нравится дезайнерам.

Тема: View attributes
Width & Height - высота, ширина.
wrap_contetnt - говорит View будь, как можно меньше.
match_parent - View будет растягиваться до размеров parent.

Если задать android:layout_width="match_parent" и android:layout_height="match_parent" - растянули View на максимальный размер по высоте и ширине parent.

Тема: Layout Margins (Отступы)
Отступы бывают двух типов внутренние и внешние.

android:layout_marginStart="30dp", отступ слева будет несколько dp. Некоторые языки, пишуться не слева на право а наоборот. Когда переключитесь на их раскладку ваш layout будет зеркально отображен.

android:layout_marginTop="60dp" - отступ сверху.
android:layout_margin="60dp" - если все отступы одинаковы и сверху и снизу, справа, слева.

Padding - второй способ делать отступы. Отступы для внутреннего контента View.

android:padding="75", отступ внутри со всех сторон.

1) Вставка изображения (Рабочий стол)

Как сверстать - для каждого внутреннего элемента далаем margin а для внешго paddind по 8dp

Тема: Visibility
android:visibility="visible"
android:visibility="invisible", View исчезла, но она сохранила отношения со всеми остальными View.  Все связи присутствуют, только. View не отрисовывается.
android:visibility="gone"- Убираем View. Она не видима, но теряются все связи.

android:animateLayoutChanges="true", магическая анимация. При удалении, добавление view, изминение View плавно и красиво отрисовывается.

Вопрос: Можно ли использовать отрицательные значение в mergin и padding? С mergin - все работает, с peddind - зависит от реализации View в котором это происходит.

Тема: Common Widgets
Виджеты, которые мы чаще всего используем.
1) ViewGroups - можно во View затаскивать View. Умеет распологать свои дочерние элементы друг относительно друга. ViewGroup - все, что не лист.
2) FrameLayout - Заменяет каждый Layout, те под одним еще лежат несколько. Когда используем, когда например делаем загрузку. Есть состояние: скачивание, закачка завершена, ошибка. Под каждое состояние есть View с атрибутом invisible и далее включаем ту, которая нужна нам.
3) LinearLayout  - распологает дочерние элементы по порядку.
4) RelativeLayout - чилдов можно распологать друг относительно друга. По оси z будет находится первый на экране, кто добавлен позже в активити.

Можно несколько Layout расположить друг в друге.

5) ScrollView - скролл контейнеры. Можно запихнуть ровно одного чилда и при этом он у вас будет всегда скролится. Удобно, когда на маленький телефон не влезло.

6) GridLayout&ConstraintLayout


Тема: Common View
1) TextView. Требуется обратить внимание только scale-independent pixel (sp). Для текста лучше использовать sp!
2) ImageView - Картики. Сущетсует 8 способов тянуть картинки. Грузить картинки с интернета, life, picasso, fresco.
3) EditText - Ввод текста. Отлавливаем какой текст пользователь ввел текст и отлавливать его в своих целях.
4) Button - кнопка

Тема: Creating View from code
Когда нам не хватает xml

Чтобы создать View из кода, необходимо иметь контекст. что такое контекст - это некоторый интерфейс, который обеспечивает доступ к окражающей среде приложения. Те самые ресурсы, dp - они все беруться из контекста. Контекст позволяет связать среду выполнения с вашим приложением. Наследниками контекста, являются активити, сервис.

gravity - атрибут, к какому краю будет стремиться наша View. Посмотреть на 54 минуте. Параметры из кода выставляем для главного layout.

Когда мы выставляем View из кода она работает быстрее, чем когда задаем в xml. XML парсится в момент когда мы вызываем метод setContentView(R.layout.activity_main). Каждый раз когда хотим отобразить View мы проходим и парсим. AsynLyoutInflighter

У активити, есть несколько методов для получения контекста - getBaseContext, getContext - для чего они нужны и какие требуется использовать. Ответ: контекстов бывает очень много, контекст есть у application , этот контекст никогда не утечет и вы не получите memory leak. После перевората экрана у вас создается новое активити. Если вы где то держите старый контекст то та старая активити не удалится. Несколько видов контекста
1) Application
2) Activity, в активити можно добавлять тему
3) Service

Если хотим использовать для отрисовки View то необходимо контекст активити, если хотите лазить в ресурсы, то вам пойдет контекст application. getContext - самое то.

Заметки:
Есть CustomView - не говорит про него.
Data-Binding
Leak Refeence

Как вообще отрисовываются View? Проходится три шага, чтобы картинка долетела до пользователя.
1) Measure - корневая view группа, от нее еще одна группа, чилды. Проводим от корневого элемента до челдов и говорим, вот на тебе мои размеры и атрибуты, попробуй себя отмежурить. Посчитай, какой размер ты хочешь занимать. Дети считают себя рекурсивно и отдают размеры Parent такие какие они хотят.

2) Layout - ты хочешь быть слишком большим сделаю я тебя таким как я хочу. После layout,   parent говорит каждой View как она будет отрисована и какого размера и в каком месте экрана будет распологаться.

3) Draw - каждаю View отрисовывает себя.

Рекомендует делать плоскую иерархию, чтобы было меньше проходов.

Прочитать про вектор.

ConstraintLayout
https://www.youtube.com/watch?v=z53Ed0ddxgM (Демонстрация работы с ConstraintLayout)
https://startandroid.ru/ru/uroki/vse-uroki-spiskom/490-urok-181-constraintslayout-advanced.html
https://startandroid.ru/ru/uroki/vse-uroki-spiskom/491-urok-182-constraintlayout-chain-weight-barrier-group.html
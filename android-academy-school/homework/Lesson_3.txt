RecyclerView
https://youtu.be/G35pcPv_tEA

Элементы:
1. LayoutManager
2. RecycledView Pool
3. Adapter
4. RecyclerView
5. Decorators
6. Animators
7. ItemTouchHelper

Для базового использования не нужно все 7 элементов, только нужен сам RecyclerView, Adapter и LayoutManager.
Recycler дает очень простые инструменты, которых много, но они простые. Это некая борьба со сложностью.

Недостатки ListView
- Layout'ы в списках становились все сложнее
- Взаимодействие с ними тоже сложное
- Большое количество legacy функционала
- В ListView был дублирующий и спорный функционал. Они заключались в том, что можно было реализовать какой-то функционал двумя способами.
Например: можно было повесить clickListener на ListView, clickListener на сам элемент, несколько clickListenerов на элемент и ListView.
Сложность была не столько в коде, сколько в том, чтобы понять, что ты написал два месяца назад.
- Проблемы с фокусом.
- Мало вариантов размещение View. Детально рассказ в докладе на 10 минуте.
- Анимация в ListView адская боль. Требовалось вмешиваться в процесс Layout-инга.



У RecyclerView основные компоненты:
- LayoutManager (Размещает View)
- ItemAnimator (Анимирует View)
- Adapter (Создает элементы, устанавливает новые данные )
- Decorator (Дорисовывает ваши элементы, до того состояния как вы хотели)

RecyclerView знает все обо всех, но не знает друг про друга.

I. LayoutManager
- LinearLayoutManager - размещение элементов друг за другом
- GridLayoutManager - размещение элементов по сетке (таблица)
- StaggeredGridLayoutManager - размещение по сетке, но есть возможность проставлять разный span для разных элементов.
Вы не обязаны следовать тому, что все элементы у вас одной ширины, высоты, одного размера.
Пример: https://stackoverflow.com/questions/29642389/no-good-example-about-recyclerview-and-staggeredgridlayoutmanager-in-android-doc

RecyclerView отвечает за scroll и LayoutManager отвечает за scroll. При этом RecyclerView обрабатывает взаомодействие пользователя с экраном,
перехватывает touch, флинги, рассчитывает все это и говорит LayoutManager на сколько это нужно проскролить. Как только LayoutManager не может проскролить,
RecyclerView перестает слать сообщение LayoutManager для скрола.

LayoutManager также отвечает за accessibility и view focusing. View focusin, то что изчезло из ListView, когда автор рассказывал про List Selection.
Accessibility, с помощью данного класса можете предоставлять легко информацию людям с ограниченными возможностями.

II. Adapter
- Адаптер ответветственнен перед RecyclerView, какие элементы изменились, плюс тоже самое что и в ListView. У ListView был один метод notifyDataSetChange.
- Отвечает за обработку касаний
- Ответственен за частичное обновление данных. Не все ViewHolder можно переиспользовать и система старается предугодать,
какие вы хотите использовать их а какие нет.

API адаптера:
ViewHolder onCreateViewHolder (ViewGroup parent, int viewType)
void onBindViewHolder(ViewHolder holder, int position)
int getItemViewType(int position)
boolean onFailedToRecyclerView(ViewHolder holder)
void onViewRecyclerView(ViewHolder holder)

У методов понятные название и нужно делать, то что они требуют.
В адаптере есть метод notifyDataSetChange, НО о нем нужно забыть. Какие методы есть:
1) notifyItemChanged()
2) notifyItemInserted()
3) notifyItemMoved()
4) notifyItemRemoved()
Они нужны для того чтобы анимировать ваши элементы, которые перемещаются передвигаются, удаляются или добавляются. Для этого в пакете RecyclerView предусмотрен
default аниматор, который делает какие-то простейшие анимации, но Вы можете написать свой в качестве домашнего задания.

Если вы перемещаете элемент от одной позиции к другой, это не значит, что что-то новое создается, что-то новое бандится - элемент просто перемещается.
Нет лишних вызовов onBindViewHolder(), возможность анимировать элементы, нет лишних вызовов onCreateViewHolder(). Управляете своими данными на экране,
как угодно и это круто.

Еще немного поговорим про нотификации:
1) long getItemId(int position)
2) void notifyItemChanged(int position, Object payload)
3) void notifyItemRangeChanged(/*...*/, Object payload)

Передать ключи List payloads и потом по этим ключам, что-то делать.

Частые ошибки:
1) public void onBindViewHolder(...) {
if(isFirstShow(position)) {
    animateAppearing(holder);
    }
    bind(holder, position);
}

На bind можно запускать онимацию, но не нужно.

2) void setData(List data) {
    this.data = data;
    notifyItemRangeChanged(0, getItemCount());
    //or
    notifyDataSetChanged();
}
Создастся миллион ViewHolderов, они попытаются друг друга заменить, ничего не произойдет и возможно вы потратите СPU устройства и произойдут, какие то лаги.

3) public void onBindViewHolder(...) {
 holder.itemView.setOnClickListener(v -> { itemClicked(position);});
}

Нужно getAdapterPosition(), также создается объект на каждый bind(). Берется position элемента, который был передан в onBindViewHolder(..). Эта позиция может быть изменится,
ваш элемент переместиться при помощи notifyItemMoved. Как вы помните при изминение позиции onBindViewHolder не вызывается.

Как лучше переписать третий пункт:
public RecyclerView.ViewHolder onCreateViewHolder(...) {
    View v = createView();
    RecyclerView.ViewHolder h = new RecyclerView.ViewHolder(v); {};
    v.setOnClickListener(it -> {
        int adapterPosition = h.getAdapterPosition();
        if(adapterPosition != RecyclerView.NO_POSITION) {
            itemClicked(adapterPosition);
        }
    }
    return v;
}

4) public ViewHolder onCreateViewHolder(...) {
    if(cachedHeader == null) {
        cachedHeader = createHeader();
    }
    if (viewType == R.layout.header)  {
        return cachedHeader;
    } else {
        return createItem();
    }
}
Преждевременная оптимизация. Если у вашего адаптера попросили onCreateViewHolder, вы должны его создать. Никогда ненадо брать ничего кэшированного. В этом смысл фреймворка
вызывать тогда, когда он нужен. Также пример того, как вкачестве ViewType можно использовать id.

II. ViewHolder
Назначение ViewHolder, чтобы кэшировать относительно дорогого findViewById; Для чего еще нужен был ViewHolder, все, только чтобы оптимизировать работу.

Для чего нужен ViewHolder в RecyclerView?
- Кеш для относительно дорогого findViewById
- Он является мостом между LayoutManager, Animator'ами и Decorator'ами. В нем хранится много важной информации для них, чтобы понимать,
где это находится, как это анимировать и что это вообще такое и откуда оно прилетело.
- Основной элемент Recycling'a

API ViewHolder
Используется, чтобы найти какую-нибуь позицию.

1) getAdapterPosition - где ваш элемент находится в вашем списке данных. Adapter position может быть значительно больше, чем Layout position.
2) getItemId()
3) getItemViewType()
4) getLayoutPosition() - где ваш элемент находится в Layout
5) getOldPosition() - нужен для аниматоров, чтобы понять откуда куда он переехал.
6) isRecyclable()/setRecyclable(boolean)

RecyclerView это обычный ViewGroup. Там элементы расположены от 0-го до последнего. 10-элементов на экране появляется, 10-там там и лежит, чуть выше два закэшированно
и чуть ниже два закэшированно.


- Жизнь и смерть ViewHolder'a
ViewHolder основной элемент RecyclerView. Весь смысл RecyclerView, чтобы ViewHolder не умирали.

LayoutManager говорит RecyclerView, что ему нужен View для позиции. RecyclerView не сразу лезет в адаптер, а он идет в Cache. В Cache лежат View для каждой позиции.
(Например: если у вас 1000 элементов в DataSet, в кэше может лежать такое же число View). Возвращается View и она уходит далее в LayoutManager.

Что будет, если кэщ скажет, что у нас нет этого View, мы пойдем в адаптер и спросим, скажи пожалуйста у этой позиции какой ViewType, адаптер скажет номер такойто.
После этого RecyclerView пойдет (getViewHolderByType) в RecycledPool (не кэш), и он найдет готовую View у которой неправильные данные, там что-то странное написано,
незнаем что, он попросит его вернуть, чтобы потом заполнить.

И если ее там не будет вдруг, он скажет адаптеру (createViewHolder) пожалуйста создай ее. Адаптер ее создаст вернет RecyclerView.

Если она будет в  RecycledPool, то RecyclerView не будет говорит, что ее надо создать, а просто скажет bindViewHolder и она вернется в LayoutManager.

Рассказ про удаление и добавление: 35 мин, 30 сек.

Адаптер помогает RecyclerView, что можно переиспользовать, а что можно выкинуть.

TransientState - это не относится к RecyclerView, это относится к состоянию системы. То состояние, в котором нельзя определить, закончило ли свою жизнь View или нет.
Это анимация, это selection


Зачем нужен sethasfixedsize (При создание RecyclerView)? - Применяем, если нам известно, что RecyclerView не меняет свой размер, т.е размер данных известен.
Это исключает дополнительные перерисовки RecyclerView, когда у вас меняется ваш DataSet. По умолчанию считается, если ваш dataset поменялся, то возможно у вас мог
раздвинуться (в размерах изменится) и тогда нужно перерисовать все, возможно перещетать все, размеры других соседей. Говорим о размерх самого RecyclerView, не внутренних
элементов.
>>https://stackoverflow.com/questions/28709220/understanding-recyclerview-sethasfixedsize
RecyclerView can perform several optimizations if it can know in advance that RecyclerView's size is not affected by the adapter contents.
RecyclerView can still change its size based on other factors (e.g. its parent's size) but this size calculation cannot depend on the size of its children or contents of its adapter (except the number of items in the adapter).
If your use of RecyclerView falls into this category, set this to {@code true}.
It will allow RecyclerView to avoid invalidating the whole layout when its adapter contents change.
@param hasFixedSize true if adapter changes cannot affect the size of the RecyclerView.

Чтобы посмотрет, как у других приложений устроены padding и margin, требуется зайти в Developer Options включить show layout bounds.
Посмотреть как View засунуты друг относительно друга.

Как узнать, что проблема в приложении?
Включить в Developer Options - Profile GPU rendering. Показывае, как каждый фрейм отрисовывается и сколько времени занимает. Overlay добавится на каждый элемен, на каждый слой.
Зеленая полоса - это 16 мс магических. Как только залазите более 16 мс повод посмотреть, что происходит с вашей отрисовкой.

Android Academy MSK - Занятие #3
https://www.youtube.com/watch?v=vGwGVnrjN0w
https://github.com/Android-Academy-MSK/Lecture3-Code
